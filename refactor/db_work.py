# import os
# import psycopg2
# from aiogram.types import KeyboardButton
# from keyboards import lists_keyboard

# # –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞


# async def db_executor(query: str, *args):
#     connection = psycopg2.connect(host=os.getenv('DB_HOST'),
#                                   user=os.getenv('DB_USER'),
#                                   password=os.getenv('DB_PASS'), 
#                                   database=os.getenv('DB_NAME'))
#     connection.autocommit = True
#     cursor = connection.cursor()
#     try:
#         cursor.execute(query, args)
#         result = cursor.fetchall()
#     except Exception as ex:
#         return [type(ex).__name__, str(ex)]
#     finally:
#         if connection:
#             cursor.close()
#             connection.close()
#     return result


# # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç) –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start

# async def start_db_query(user_id: int):
#     await db_executor("""CREATE TABLE IF NOT EXISTS user%s(
#     id serial primary key,
#     todo_name TEXT,
#     task_text TEXT,
#     is_done BOOL,
#     is_edited BOOL,
#     UNIQUE(task_text));""", user_id)

#     await db_executor("""CREATE TABLE IF NOT EXISTS usercurrentlist(
#     user_id int primary key,
#     todo_name varchar(200)
#     )
#     """)

#     await db_executor("INSERT INTO usercurrentlist (user_id, todo_name) VALUES (%s, null)", user_id)


# # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ TODO-–ª–∏—Å—Ç–∞

# async def get_chosen_list(user_id: int):
#     data = await db_executor("SELECT todo_name FROM usercurrentlist WHERE user_id = %s", user_id)
#     return data[0][0]


# # –§—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç—É–¥—É-–ª–∏—Å—Ç–∞ –≤ –≤–∏–¥–µ –∫—Ä–∞—Å–∏–≤–æ–π —Å—Ç—Ä–æ–∫–∏

# async def build_todo(user_id: int):
#     current_todo = await get_chosen_list(user_id)
#     data = await db_executor("SELECT * FROM user%s WHERE todo_name = %s ORDER BY id;", user_id, current_todo)
#     todo_list = f'TODO-–ª–∏—Å—Ç "{current_todo}": \n\n'
#     iterator = 0
#     for i in range(0, len(data)):
#         if not data[i][2]:
#             continue
#         if data[i][3]:
#             todo_list += f'üü¢ {iterator + 1}) {data[i][2]}\n'
#             iterator += 1
#         else:
#             todo_list += f'üïê {iterator + 1}) {data[i][2]}\n'
#             iterator += 1
#         if data[i][4]:
#             todo_list = todo_list[:-1] + ' <i>(–∏–∑–º.)</i>\n'
#     if todo_list == f'TODO-–ª–∏—Å—Ç "{current_todo}": \n\n':
#         return False
#     return todo_list


# # –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ TODO-–ª–∏—Å—Ç–æ–≤

# async def build_todos_list(user_id: int):
#     lists = await db_executor("""SELECT DISTINCT todo_name 
#                                  FROM user%s 
#                                  ORDER BY todo_name;""", user_id)
#     if not lists:
#         return '–ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ TODO-–ª–∏—Å—Ç–∞. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π\
#  —Å–ø–∏—Å–æ–∫ (/createlist) –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', False
#     listof_lists = '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏—Å–∫–∏:\n\n'
#     for i in range(len(lists)):
#         listof_lists += f'{i + 1}) {lists[i][0]}\n'
#     return listof_lists, True


# # –§—É–Ω–∫—Ü–∏—è –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –∏–∑ —Ç—É–¥—É-–ª–∏—Å—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É –¥–ª—è –µ–≥–æ –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

# async def parse_task(task_num, user_id: int, command: str):
#     if not task_num.isdigit():
#         return '–ü–æ—Ö–æ–∂–µ, –≤—ã –≤–≤–µ–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –∏–ª–∏ –≤–æ–≤—Å–µ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.'
#     elif int(task_num) <= 0:
#         return '–ü–æ—Ö–æ–∂–µ, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ —á–∏—Å–ª–æ ‚Äî "1". –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É'

#     # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–¥–µ–ª–∞—Ç—å SQL-–∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–∞—Å–∫–∏
#     current_todo = await get_chosen_list(user_id)
#     data = await db_executor('SELECT * FROM user%s WHERE todo_name = %s ORDER BY id;', user_id, current_todo)
#     if len(data[1:]) == 0:
#         return '–≠—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ (/addtask) –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É'

#     else:
#         try:
#             task = data[1:][int(task_num) - 1][2]
#             if command == 'mark':
#                 is_done = await db_executor("""SELECT is_done FROM user%s WHERE task_text = %s 
#                                             AND todo_name = %s;""", user_id, task, current_todo)
#                 if is_done[0][0]:
#                     return '–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'
#                 else:
#                     await db_executor("""UPDATE user%s SET is_done = true WHERE task_text = %s
#                                        AND todo_name = %s;""", user_id, task, current_todo)
#                     return 1
#             elif command == 'delete':
#                 await db_executor("""DELETE FROM user%s WHERE task_text = %s
#                                   AND todo_name = %s;""", user_id, task, current_todo)
#                 return 1
#             else:
#                 return 1, task
#         except IndexError:
#             return '–ó–∞–¥–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É'


# async def parse_list(list_num, user_id):
#     if not list_num.isdigit():
#         return '–ü–æ—Ö–æ–∂–µ, –≤—ã –≤–≤–µ–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –∏–ª–∏ –≤–æ–≤—Å–µ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.'
#     elif int(list_num) <= 0:
#         return '–ü–æ—Ö–æ–∂–µ, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ —á–∏—Å–ª–æ ‚Äî "1". –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É'
#     lists = await db_executor('SELECT DISTINCT todo_name FROM user%s ORDER BY todo_name;', user_id)
#     if len(lists) == 0:
#         return '–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è, —É –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ TODO-–ª–∏—Å—Ç–∞.\
#     –°–∞–º–æ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π!'
#     else:
#         try:
#             list_name = lists[int(list_num) - 1][0]
#             return list_name, True
#         except IndexError:
#             return '–°–ø–∏—Å–∫–∞ –ø–æ–¥ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É'


# # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ

# async def taskcount_is_valid(user_id: int) -> bool:
#     current_todo = await get_chosen_list(user_id)
#     data = await db_executor("SELECT COUNT(*) FROM user%s WHERE task_text IS NOT NULL AND todo_name = %s;",
#                              user_id, current_todo)
#     if data[0][0] > 49:
#         return False
#     return True


# async def fill_keyboard(user_id: int):
#     if lists_keyboard.keyboard:
#         return
#     else:
#         data = await db_executor("""SELECT DISTINCT COUNT(*) FROM user%s
#                                     WHERE task_text IS NULL;""", user_id)
#         for i in range(data[0][0]):
#             lists_keyboard.add(KeyboardButton(f'{int(i + 1)}'))
