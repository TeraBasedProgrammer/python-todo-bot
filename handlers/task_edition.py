# from aiogram import types, Dispatcher
# from aiogram.dispatcher import FSMContext
# from .fsm import EditTaskFSM
# from db_work import db_executor, parse_task, build_todo, get_chosen_list
# from invoke_bot import bot


# async def get_edittask_num(message: types.Message, state: FSMContext):
#     task = await parse_task(message.text, message.from_user.id, 'edit')
#     if type(task) != tuple:
#         if '—Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç' in task:
#             await state.finish()
#         await bot.send_message(message.from_user.id, task)
#         return
#     else:
#         async with state.proxy() as data:
#             data['task'] = task[1]
#         await bot.send_message(message.from_user.id, '–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:')
#         await bot.send_message(message.from_user.id, task[1],
#                                entities=[{"type": "code", "offset": 0, "length": len(task[1])}])
#         await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π / –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:')
#         await EditTaskFSM.next()
#         return


# async def handle_edittask(message: types.Message, state: FSMContext):
#     if len(message.text) > 400:
#         await message.reply('–ó–∞–¥–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–Ω–∞ –∑–∞–¥–∞–Ω–∏—è ‚Äî 400 —Å–∏–º–≤–æ–ª–æ–≤.\
#  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ–≥–æ —É–∫–æ—Ä–æ—Ç–∏—Ç—å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')
#         return
#     elif ('üïê' in message.text) or ('üü¢' in message.text):
#         await bot.send_message(message.from_user.id, '–ü–æ—Ö–æ–∂–µ, –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∂–∏ –≤ –∑–∞–¥–∞–Ω–∏–∏.\
#  –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –±–µ–∑ –Ω–∏—Ö –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')
#         # await state.finish()
#         await bot.send_animation(message.from_user.id,
#                                  'CgACAgIAAxkBAAIC1WLuoMBO_Z5aoR_0gA9bZP36oqNPAAJhAgACB_4JS_0jTm10ch3rKQQ')
#     else:
#         old_todo = await build_todo(message.from_user.id)
#         if len(old_todo) + len(message.text) > 4096:
#             await bot.send_message(message.from_user.id, '–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è, –≤–∞—à —Å–ø–∏—Å–æ–∫ —É–∂–µ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –±–æ–ª—å—à–æ–π, —á—Ç–æ –¥–∞–∂–µ\
#  —Ç–µ–ª–µ–≥—Ä–∞–º —Ä—É–≥–∞–µ—Ç—Å—è –Ω–∞ –µ–≥–æ –¥–ª–∏–Ω–Ω—É (–±–æ–ª–µ–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–æ—Ä–æ—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, —É–∫–æ—Ä–æ—Ç–∏—Ç—å –∏–ª–∏\
#  —É–¥–∞–ª–∏—Ç—å —á–∞—Å—Ç—å –∑–∞–¥–∞–Ω–∏–π, –ª–∏–±–æ —É–¥–∞–ª–∏—Ç–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, –≤—ã\
#  –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫ (/createlist)')
#             await state.finish()
#             return
#         else:
#             async with state.proxy() as data:
#                 current_list = await get_chosen_list(message.from_user.id)
#                 try_edit = await db_executor("""UPDATE user%s SET task_text = %s, is_edited = true
#                                              WHERE task_text = %s
#                                              AND todo_name = %s;""",
#                                              message.from_user.id,
#                                              message.text,
#                                              data['task'],
#                                              current_list)
#                 if try_edit[0] == 'UniqueViolation':
#                     await bot.send_message(message.from_user.id, '–¢–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')
#                     await state.finish()
#                     return
#                 await bot.send_message(message.from_user.id, '–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ!\
#  –¢–µ–ø–µ—Ä—å –≤–∞—à —Å–ø–∏—Å–æ–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫: ')
#                 await bot.send_message(message.from_user.id, await build_todo(message.from_user.id), parse_mode='HTML')
#                 await state.finish()


# def register_taskedition_handlers(dp: Dispatcher):
#     dp.register_message_handler(get_edittask_num, state=EditTaskFSM.edittask_num)
#     dp.register_message_handler(handle_edittask, state=EditTaskFSM.edittask)
