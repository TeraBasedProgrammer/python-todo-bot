# import random
# from aiogram import types, Dispatcher
# from aiogram.dispatcher import FSMContext
# from aiogram.types import ReplyKeyboardRemove
# from .fsm import AddTaskFSM
# from db_work import db_executor, build_todo, get_chosen_list, taskcount_is_valid
# from invoke_bot import bot
# from config import ok_stickers
# from keyboards import answear_keyboard


# async def handle_addtask(message: types.Message, state: FSMContext):
#     if len(message.text) > 400:
#         await message.reply('–ó–∞–¥–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–Ω–∞ –∑–∞–¥–∞–Ω–∏—è ‚Äî 400 —Å–∏–º–≤–æ–ª–æ–≤.\
#  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ–≥–æ —É–∫–æ—Ä–æ—Ç–∏—Ç—å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')
#         return
#     elif ('üïê' in message.text) or ('üü¢' in message.text):
#         await bot.send_message(message.from_user.id, '–ü–æ—Ö–æ–∂–µ, –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∂–∏ –≤ –∑–∞–¥–∞–Ω–∏–∏.\
#  –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –±–µ–∑ –Ω–∏—Ö –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')
#         await bot.send_animation(message.from_user.id,
#                                  'CgACAgIAAxkBAAIC1WLuoMBO_Z5aoR_0gA9bZP36oqNPAAJhAgACB_4JS_0jTm10ch3rKQQ')
#     else:
#         old_todo = await build_todo(message.from_user.id)
#         if len(str(old_todo)) + 6 + len(message.text) > 4096:
#             await bot.send_message(message.from_user.id, '–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è, –≤–∞—à —Å–ø–∏—Å–æ–∫ —É–∂–µ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –±–æ–ª—å—à–æ–π,\
#  —á—Ç–æ –¥–∞–∂–µ —Ç–µ–ª–µ–≥—Ä–∞–º —Ä—É–≥–∞–µ—Ç—Å—è –Ω–∞ –µ–≥–æ –¥–ª–∏–Ω–Ω—É (–±–æ–ª–µ–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ–∫—Å—Ç —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, —É–∫–æ—Ä–æ—Ç–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å\
#  —á–∞—Å—Ç—å –∑–∞–¥–∞–Ω–∏–π, –ª–∏–±–æ —É–¥–∞–ª–∏—Ç–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫\
# (/createlist))')
#             await state.finish()
#             return
#         else:
#             current_todo = await get_chosen_list(message.from_user.id)
#             try_add = await db_executor("""INSERT INTO user%s (todo_name, task_text, is_done, is_edited) 
#                                            VALUES(%s, %s, False, False);""",
#                                         message.from_user.id, current_todo, message.text)
#             if try_add[0] == 'UniqueViolation':
#                 await bot.send_message(message.from_user.id, f'–¢–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')
#                 return
#             todo = await build_todo(message.from_user.id)
#             await bot.send_message(message.from_user.id, '–°–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–ø–æ–ª–Ω–µ–Ω, —Ç–µ–ø–µ—Ä—å –æ–Ω –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:')
#             await bot.send_message(message.from_user.id, todo, parse_mode='HTML')
#             await bot.send_message(message.from_user.id, '–ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ? ("–î–∞", "–ù–µ—Ç")',
#                                    reply_markup=answear_keyboard)
#             await AddTaskFSM.next()


# async def handle_repeat_add(message: types.Message, state: FSMContext):
#     if message.text == '–î–∞':
#         if not await taskcount_is_valid(message.from_user.id):
#             await bot.send_message(message.from_user.id, '–ü–æ—Ö–æ–∂–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç–∏–≥–ª–æ –º–∞–∫—Å–∏–º—É–º–∞ (50).\
#         –£–¥–∞–ª–∏—Ç–µ —á–∞—Å—Ç—å –∑–∞–¥–∞–Ω–∏–π –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', reply_markup=ReplyKeyboardRemove())
#             await state.finish()
#         else:
#             await AddTaskFSM.addtask.set()
#             await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:', reply_markup=ReplyKeyboardRemove())
#             return
#     elif message.text == '–ù–µ—Ç':
#         await bot.send_message(message.from_user.id, '–û–∫', reply_markup=ReplyKeyboardRemove())
#         await bot.send_sticker(message.from_user.id,
#                                ok_stickers[random.randint(0, len(ok_stickers) - 1)])
#         await state.finish()
#     else:
#         await bot.send_message(message.from_user.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –ª–∏–±–æ "–î–∞", –ª–∏–±–æ "–ù–µ—Ç".')
#         return


# def register_taskaddition_handlers(dp: Dispatcher):
#     dp.register_message_handler(handle_addtask, state=AddTaskFSM.addtask)
#     dp.register_message_handler(handle_repeat_add, state=AddTaskFSM.repeat_addition)
